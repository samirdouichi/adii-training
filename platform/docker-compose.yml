
---
version: '3.8'
services:
  postgresql:
    container_name: postgresql
    image: debezium/postgres:latest
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./init/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: on-failure

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 20s
    extra_hosts:
      - "moby:127.0.0.1"
  broker:
    image: confluentinc/cp-kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - '29092:29092'
      - '9092:9092'
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:9092,OUTSIDE://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL


      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

    extra_hosts:
      - "moby:127.0.0.1"
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    ports:
      - "9081:9081"
    depends_on:
      broker:
        condition: service_healthy
    environment:
      SERVER_PORT: 9081
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_NAME: local
  init-kafka:
    image: confluentinc/cp-kafka:latest
    hostname: init
    container_name: init
    depends_on:
      broker:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:9092 --list
      echo -e 'Creating kafka topics'
      kafka-topics --create --if-not-exists --topic Kafka_Example --bootstrap-server broker:9092 --partitions 1 --replication-factor 1
      kafka-topics --create --if-not-exists --topic Kafka_Example_json --bootstrap-server broker:9092 --partitions 1 --replication-factor 1
      kafka-topics --create --if-not-exists --topic postgres.public.dishes --bootstrap-server broker:9092 --partitions 1 --replication-factor 1
      kafka-topics --create --if-not-exists --topic postgres.public.restaurants --bootstrap-server broker:9092 --partitions 1 --replication-factor 1
      kafka-topics --create --if-not-exists --topic web.domains --bootstrap-server broker:9092 --partitions 1 --replication-factor 1
      kafka-topics --create --if-not-exists --topic active.web.domains --bootstrap-server broker:9092 --partitions 1 --replication-factor 1
      kafka-topics --create --if-not-exists --topic orders --bootstrap-server broker:9092 --partitions 1 --replication-factor 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server broker:9092 --list
      "

  connect:
    image: confluentinc/cp-kafka-connect:6.1.1
    hostname: connect
    container_name: connect
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.1.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    command:
      "bash -c 'confluent-hub install --no-prompt debezium/debezium-connector-postgresql:latest &&\
         confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:latest && \
         confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:latest && \
         confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:latest && \
         /etc/confluent/docker/run'"
    restart: on-failure

  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    container_name: schema-registry
    restart: unless-stopped
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: "curl -f http://localhost:8081 || exit 1"


  schema-registry-ui:
      image: landoop/schema-registry-ui:0.9.5
      container_name: kafka-schema-registry-ui
      restart: unless-stopped
      depends_on:
        - schema-registry
      ports:
        - "8001:8000"
      environment:
        SCHEMAREGISTRY_URL: http://schema-registry:8081
        PROXY: "true"
      healthcheck:
        test: "wget --quiet --tries=1 --spider http://localhost:8000 || exit 1"

  kafka-rest-proxy:
      image: confluentinc/cp-kafka-rest:7.0.1
      container_name: kafka-rest-proxy
      restart: unless-stopped
      depends_on:
        - zookeeper
        - broker
      ports:
        - "8082:8082"
      environment:
        KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://broker:9092
        KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_REST_HOST_NAME: kafka-rest-proxy
        KAFKA_REST_LISTENERS: http://0.0.0.0:8082
        KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081
        KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS: 30000
      healthcheck:
        test: "curl -f kafka-topics-ui://localhost:8082 || exit 1"

  ksqldb-server:
      image: confluentinc/ksqldb-server:0.17.0
      container_name: ksqldb-server
      restart: unless-stopped
      depends_on:
        - broker
        - connect
        - schema-registry
      ports:
        - "8088:8088"
      environment:
        KSQL_BOOTSTRAP_SERVERS: broker:9092
        KSQL_LISTENERS: http://0.0.0.0:8088
        KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
        KSQL_KSQL_SERVICE_ID: ksqldb-server-1
        KSQL_KSQL_CONNECT_URL: http://connect:8083
        KSQL_AUTO_OFFSET_RESET: "earliest"
        KSQL_CACHE_MAX_BYTES_BUFFERING: 0
        KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
        KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
        KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"

      healthcheck:
        test: "curl -f http://localhost:8088 || exit 1"
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.17.0
    container_name: ksqldb-cli
    depends_on:
      - broker
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    restart: on-failure
  citus:
    image: citusdata/citus
    container_name: citus
    ports:
      - 5433:5435
    environment:
      - POSTGRES_DB=merchant
      - POSTGRES_USER=merchant
      - POSTGRES_PASSWORD=merchant
    restart: on-failure

  superset:
    image: apache/superset
    container_name: superset
    ports:
      - 9669:8088
    restart: on-failure

  hivemq:
    image: hivemq/hivemq-ce:latest
    # image: hivemq/hivemq4:latest

    mem_reservation: 800M
    ports:
      - 1883:1883
      - 8091:8099
    environment:
      JAVA_OPTS: "-XX:+UnlockExperimentalVMOptions -XX:InitialRAMPercentage=30 -XX:MaxRAMPercentage=80 -XX:MinRAMPercentage=30"
    # Wait until HiveMQ is completely started
    healthcheck:
      test: ["CMD", "echo", "\"\"", ">", "/dev/tcp/127.0.0.1/1883"]
      interval: 5s
      timeout: 5s
      retries: 10
